{"semester_exam_result_stg_2_to_trans_qry":"""insert into semester_exam_result_trans(id,exam_id,exam_code,student_id,student_uid,school_id,studying_class,section,question_id,obtained_marks)
select id,exam_id,exam_code,student_id,student_uid,school_id,studying_class,section,question_id,obtained_marks
from  semester_exam_result_staging_2
on conflict(exam_code,student_uid,question_id)
do update set 	
id=excluded.id,
exam_id=excluded.exam_id,
exam_code=excluded.exam_code,
student_id=excluded.student_id,
student_uid=excluded.student_uid,
school_id=excluded.school_id,
studying_class=excluded.studying_class,
section=excluded.section,
question_id=excluded.question_id,
obtained_marks=excluded.obtained_marks,
updated_on=now()""",
"sat_exception_grade_school_jolt_spec":"""[
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "cluster_id": [
          "=toString",
          null
        ]
      }
    }
  },
  {
    "operation": "shift",
    "spec": {
      "*": {
        "school_latitude": "data.[&1].school_latitude",
        "school_longitude": "data.[&1].school_longitude",
        "district_id": "data.[&1].district_id",
        "district_name": "data.[&1].district_name",
        "block_id": "data.[&1].block_id",
        "block_name": "data.[&1].block_name",
        "cluster_id": "data.[&1].cluster_id",
        "cluster_name": "data.[&1].cluster_name",
        "school_id": "data.[&1].school_id",
        "school_name": "data.[&1].school_name",
        "school_management_type": "data.[&1].school_management_type",
        "semester": "data.[&1].semester",
        "grade": "data.[&1].grade",
        "subjects": "data.[&1].subjects",
        "total_schools": "data.[&1].total_schools",
        "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data",
        "@total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
        "total_schools_with_missing_data": "footer.@(1,cluster_id).total_schools_with_missing_data"
      }
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "footer": {
        "*": {
          "total_schools_with_missing_data": "=intSum(@(1,total_schools_with_missing_data))"
        }
      }
    }
  },
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "school_latitude": "data.[&1].school_latitude",
          "school_longitude": "data.[&1].school_longitude",
          "district_id": "data.[&1].district_id",
          "district_name": "data.[&1].district_name",
          "block_id": "data.[&1].block_id",
          "block_name": "data.[&1].block_name",
          "cluster_id": "data.[&1].cluster_id",
          "cluster_name": "data.[&1].cluster_name",
          "school_id": "data.[&1].school_id",
          "school_name": "data.[&1].school_name",
          "school_management_type": "data.[&1].school_management_type",
          "semester": "data.[&1].semester",
          "grade": "data.[&1].grade",
          "subjects": "data.[&1].subjects",
          "total_schools": "data.[&1].total_schools",
          "@total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
          "total_schools_with_missing_data": "allSchoolsFooter.total_schools_with_missing_data[]",
          "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data"
        }
      },
      "footer": "&"
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "total_schools_with_missing_data": "=intSum(@(1,total_schools_with_missing_data))"
      }
    }
  },
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "school_latitude": "data.[&1].school_latitude",
          "school_longitude": "data.[&1].school_longitude",
          "district_id": "data.[&1].district_id",
          "district_name": "data.[&1].district_name",
          "block_id": "data.[&1].block_id",
          "block_name": "data.[&1].block_name",
          "cluster_id": "data.[&1].cluster_id",
          "cluster_name": "data.[&1].cluster_name",
          "school_id": "data.[&1].school_id",
          "school_name": "data.[&1].school_name",
          "school_management_type": "data.[&1].school_management_type",
          "semester": "data.[&1].semester",
          "grade": "data.[&1].grade",
          "subjects": "data.[&1].subjects",
          "total_schools": "data.[&1].total_schools",
          "total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
          "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data"
        }
      },
      "footer": "&",
      "allSchoolsFooter": "&"
    }
  }
]""",
"sat_qst_to_agg":"""insert into semester_exam_school_result(school_id,exam_code,exam_date,grade,academic_year,subject,total_marks,obtained_marks
,school_name,school_latitude,school_longitude,cluster_id,cluster_name,cluster_latitude,cluster_longitude,students_count,students_attended,semester,
block_id,block_name,block_latitude,block_longitude,district_id,district_name,district_latitude,district_longitude,school_management_type,school_category,created_on,updated_on)
select a.school_id,a.exam_code,exam_date,grade,academic_year,subject,total_marks,obtained_marks
,school_name,school_latitude,school_longitude,a.cluster_id,cluster_name,cluster_latitude,cluster_longitude,students_count,students_attended,semester,
a.block_id,block_name,block_latitude,block_longitude,a.district_id,district_name,district_latitude,district_longitude,school_management_type,school_category,now(),now()
from
(select school_id,exam_code,exam_date,grade,academic_year,subject,sum(total_marks)as total_marks,sum(obtained_marks)as obtained_marks,school_name,
cluster_id,cluster_name,
total_students students_count,block_id,block_name,
district_id,district_name
from semester_exam_school_qst_result
group by school_id,exam_code,exam_date,grade,academic_year,subject,school_name,cluster_id,cluster_name,total_students,
block_id,block_name,district_id,district_name
) as a 
inner join 
(select a.school_id,b.school_latitude,b.school_longitude,a.cluster_id,b.cluster_latitude,b.cluster_longitude,
a.block_id,b.block_latitude,b.block_longitude,a.district_id,b.district_latitude,b.district_longitude,a.school_management_type,a.school_category
from school_hierarchy_details as a inner join school_geo_master as b on a.school_id=b.school_id 
where a.school_name is not null and a.cluster_name is not null and b.school_latitude>0 and b.school_longitude>0 and b.cluster_latitude>0 and b.cluster_longitude>0
)as b on a.school_id=b.school_id
left join
(select exam_id,assessment_year,exam_code,semester from semester_exam_mst) as d on a.exam_code=d.exam_code
left join (select count(distinct(student_uid)) as students_attended,school_id,exam_code from semester_exam_stud_grade_count group by school_id,exam_code) as trans 
on a.school_id=trans.school_id and a.exam_code=trans.exam_code 
on conflict(school_id,exam_code,academic_year)
do update set 
school_id=excluded.school_id,exam_code=excluded.exam_code,exam_date=excluded.exam_date,grade=excluded.grade,academic_year=excluded.academic_year,subject=excluded.subject,
total_marks=excluded.total_marks,obtained_marks=excluded.obtained_marks,school_name=excluded.school_name,students_count=excluded.students_count,students_attended=excluded.students_attended,
school_latitude=excluded.school_latitude,school_longitude=excluded.school_longitude,cluster_id=excluded.cluster_id,cluster_name=excluded.cluster_name,
cluster_latitude=excluded.cluster_latitude,cluster_longitude=excluded.cluster_longitude,block_id=excluded.block_id,block_name=excluded.block_name,
block_latitude=excluded.block_latitude,block_longitude=excluded.block_longitude,district_id=excluded.district_id,district_name=excluded.district_name,
district_latitude=excluded.district_latitude,district_longitude=excluded.district_longitude,semester=excluded.semester,school_management_type=excluded.school_management_type,
school_category=excluded.school_category,updated_on=now();""",
"sat_subject_footer_district_jolt_spec":"""[
  {
    "operation": "shift",
    "spec": {
      "*": {
        "@grade": "@district_id"
      }
    }
	}
]""",
"sat_semester_exam_mst_dup_table_name":"""semester_exam_mst_dup""",
"sat_exception_grade_block_jolt_spec":"""[
  {
    "operation": "shift",
    "spec": {
      "*": {
        "block_latitude": "data.[&1].block_latitude",
        "block_longitude": "data.[&1].block_longitude",
        "district_id": "data.[&1].district_id",
        "district_name": "data.[&1].district_name",
        "block_id": "data.[&1].block_id",
        "block_name": "data.[&1].block_name",
        "grade": "data.[&1].grade",
        "subjects": "data.[&1].subjects",
        "school_management_type": "data.[&1].school_management_type",
        "semester": "data.[&1].semester",
        "total_schools": "data.[&1].total_schools",
        "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data",
        "@total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
        "total_schools_with_missing_data": "footer.@(1,district_id).total_schools_with_missing_data"
      }
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "footer": {
        "*": {
          "total_schools_with_missing_data": "=intSum(@(1,total_schools_with_missing_data))"
        }
      }
    }
  },
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "block_latitude": "data.[&1].block_latitude",
          "block_longitude": "data.[&1].block_longitude",
          "district_id": "data.[&1].district_id",
          "district_name": "data.[&1].district_name",
          "block_id": "data.[&1].block_id",
          "block_name": "data.[&1].block_name",
          "grade": "data.[&1].grade",
          "subjects": "data.[&1].subjects",
          "school_management_type": "data.[&1].school_management_type",
          "semester": "data.[&1].semester",
          "total_schools": "data.[&1].total_schools",
          "@total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
          "total_schools_with_missing_data": "allBlocksFooter.total_schools_with_missing_data[]",
          "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data",
          "semester": "data.[&1].semester"
        }
      },
      "footer": "&"
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "total_schools_with_missing_data": "=intSum(@(1,total_schools_with_missing_data))"
      }
    }
  },
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "block_latitude": "data.[&1].block_latitude",
          "block_longitude": "data.[&1].block_longitude",
          "district_id": "data.[&1].district_id",
          "district_name": "data.[&1].district_name",
          "block_id": "data.[&1].block_id",
          "block_name": "data.[&1].block_name",
          "grade": "data.[&1].grade",
          "subjects": "data.[&1].subjects",
          "school_management_type": "data.[&1].school_management_type",
          "semester": "data.[&1].semester",
          "total_schools": "data.[&1].total_schools",
          "total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
          "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data"
        }
      },
      "footer": "&",
      "allBlocksFooter": "&"
    }
  }
]
""",
"sat_filter_same_id_record_semester_exam_grade_details_qry":"""SELECT  school_id,grade,students_count from 
(SELECT  school_id,grade,students_count,count(*) over (partition by school_id,grade) as rn from FLOWFILE) sq Where rn =1""",
"sat_filter_same_record_semester_exam_subject_details_qry":"""select subject_id,subject,grade from (select  subject_id,subject,grade,row_number() over
(partition by subject_id,subject,grade) as rn from flowfile) sq Where rn =1""",
"sat_grade_cluster_jolt_spec":"""[
  {
    "operation": "shift",
    "spec": {
      "*": {
        "*_lat*": "data.[&1].Details.latitude",
        "*_long*": "data.[&1].Details.longitude",
        "district_id": "data.[&1].Details.district_id",
        "district_name": "data.[&1].Details.district_name",
        "block_id": "data.[&1].Details.block_id",
        "block_name": "data.[&1].Details.block_name",
        "cluster_id": "data.[&1].Details.cluster_id",
        "cluster_name": "data.[&1].Details.cluster_name",
        "semester": "data.[&1].Details.semester",
        "cluster_performance": "data.[&1].Details.Performance",
        "academic_year": "data.[&1].Details.Academic year",
        "school_management_type": "data.[&1].Details.school_management_type",
        "grade": "data.[&1].Details.Grade",
        "@grade_wise_performance": "data.[&1].Grade Wise Performance",
        "total_students": "data.[&1].Details.total_students",
        "students_attended": "data.[&1].Details.students_attended",
        "total_schools": "data.[&1].Details.total_schools",
      "subjects": "data.[&1].Subjects",
        "@total_students": "footer.@(1,block_id).total_students[]",
        "@students_attended": "footer.@(1,block_id).students_attended[]",
        "@total_schools": "footer.@(1,block_id).total_schools[]"
      }
    }
	},
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "Details": "data.[&1].&",
          "Subjects": "data.[&1].&",
          "@Details.total_students": "AllClustersFooter.total_students",
          "@Details.students_attended": "AllClustersFooter.students_attended",
          "@Details.total_schools": "AllClustersFooter.total_schools"
        }
      },
      "footer": "&"
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "footer": {
        "*": {
          "total_students": "=intSum(@(1,total_students))",
          "students_attended": "=intSum(@(1,students_attended))",
          "total_schools": "=intSum(@(1,total_schools))"
        }
      }
    }
	},
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "total_students": "=intSum(@(1,total_students))",
        "students_attended": "=intSum(@(1,students_attended))",
        "total_schools": "=intSum(@(1,total_schools))"
      }
    }
	}]""",
"sat_trans_qst_agg":"""insert into semester_exam_school_qst_result(school_id,exam_code,exam_date,grade,total_marks,obtained_marks,indicator,question_id
,academic_year,students_attended,subject,school_name,cluster_id,cluster_name,total_students,
block_id,block_name,district_id,district_name,school_management_type,school_category,created_on,updated_on)
select data.school_id,data.exam_code,data.exam_date,data.grade,data.total_marks,data.obtained_marks,data.indicator,data.question_id
	,assessment_year as academic_year,data.students_attended,
	d.subject_name as subject,initcap(b.school_name)as school_name,b.cluster_id,initcap(b.cluster_name)as cluster_name,g.students_count as total_students,
	b.block_id,initcap(b.block_name)as block_name,b.district_id,initcap(b.district_name)as district_name,b.school_management_type,b.school_category,now(),now()
	from
	(select data.* from 
	(select a.school_id,a.exam_code,a.students_attended,to_date(substr(exam_code,8,14)::text,'ddmmyyyy')as exam_date,
		a.studying_class as grade,b.question_id,b.indicator,b.question_marks*sum(students_attended) as total_marks,sum(a.obtained_marks)as obtained_marks,b.exam_id
	from
	(select exam_id,school_id,exam_code,studying_class,question_id,sum(obtained_marks)as obtained_marks,count(distinct(student_uid)) as students_attended
	from semester_exam_result_trans sem where to_date(substr(sem.exam_code,8,14),'ddmmyyyy')>(now() -(select concat(trim(max(retention_period)::text),'days') from data_replay_meta)::interval)::date and exam_code not in (select exam_code from semester_exam_mst sem join (select distinct unnest(string_to_array(regexp_replace(semesters,'[^0-9,]','','g'),',')) as semesters,academic_year from data_replay_meta where created_on>now()-'5days'::interval and cqube_process_status='SUCCESS' and data_source='semester_assessment_test') dsem on sem.semester=dsem.semesters::int and sem.assessment_year=dsem.academic_year)
	group by exam_id,school_id,exam_code,studying_class,question_id)as a
	left join (select exam_id,question_id,indicator,question_marks from semester_exam_qst_mst group by exam_id,question_id,indicator,question_marks) as b 
	on a.exam_id=b.exam_id and a.question_id=b.question_id
	group by a.school_id,a.exam_code,a.studying_class,a.students_attended,b.question_id,b.indicator,b.exam_id,b.question_marks,a.question_id)as data
	where data.total_marks is not null)as data
	inner join 
	(select a.school_id,a.school_name,b.school_latitude,b.school_longitude,a.cluster_id,a.cluster_name,b.cluster_latitude,b.cluster_longitude,
	a.block_id,a.block_name,b.block_latitude,b.block_longitude,a.district_id,a.district_name,b.district_latitude,b.district_longitude,a.school_management_type,a.school_category
	from school_hierarchy_details as a inner join school_geo_master as b on a.school_id=b.school_id 
	where a.school_name is not null and a.cluster_name is not null and b.school_latitude>0 and b.school_longitude>0 and b.cluster_latitude>0 and b.cluster_longitude>0
	)as b 
	on data.school_id=b.school_id
	left join 
	(select exam_id,assessment_year,exam_code,subject_name from semester_exam_mst) as d on data.exam_id=d.exam_id and data.exam_code=d.exam_code
	left join 
(select * from school_grade_enrolment) as g
on data.school_id=g.school_id and data.grade=g.grade
	where total_marks>=obtained_marks
on conflict(school_id,exam_code,academic_year,question_id)
do update set 
school_id=excluded.school_id,exam_code=excluded.exam_code,exam_date=excluded.exam_date,grade=excluded.grade,total_marks=excluded.total_marks,
obtained_marks=excluded.obtained_marks,indicator=excluded.indicator,question_id=excluded.question_id,academic_year=excluded.academic_year,subject=excluded.subject,
students_attended=excluded.students_attended,school_name=excluded.school_name,total_students=excluded.total_students,
cluster_id=excluded.cluster_id,cluster_name=excluded.cluster_name,block_id=excluded.block_id,block_name=excluded.block_name,
district_id=excluded.district_id,district_name=excluded.district_name,school_management_type=excluded.school_management_type,school_category=excluded.school_category,updated_on=now();""",
"semester_exam_result_unique_record_same_id_qry":"""insert into semester_exam_result_trans(id,exam_id,exam_code,student_id,student_uid,school_id,studying_class,section,question_id,obtained_marks)
SELECT  id,exam_id,exam_code,student_id,student_uid,school_id,studying_class,section,question_id,obtained_marks from 
(SELECT  id,exam_id,exam_code,student_id,student_uid,school_id,studying_class,section,question_id,obtained_marks,count(*) over 
	(partition by exam_code,student_uid,question_id) as rn from semester_exam_result_staging_2) sq Where rn =1
  on conflict(exam_code,student_uid,question_id)
do update set 	
id=excluded.id,
exam_id=excluded.exam_id,
exam_code=excluded.exam_code,
student_id=excluded.student_id,
student_uid=excluded.student_uid,
school_id=excluded.school_id,
studying_class=excluded.studying_class,
section=excluded.section,
question_id=excluded.question_id,
obtained_marks=excluded.obtained_marks,
updated_on=now()""",
"sat_semester_exam_qst_mst_count_null":"""(select
SUM(CASE when question_id IS NULL THEN 1 ELSE 0 END) AS count_null_question_id,
SUM(CASE when exam_id IS NULL THEN 1 ELSE 0 END) AS count_null_exam_id,
SUM(CASE when question_title IS NULL THEN 1 ELSE 0 END) AS count_null_question_title,
SUM(CASE when question IS NULL THEN 1 ELSE 0 END) AS count_null_question,
SUM(CASE when question_marks IS NULL THEN 1 ELSE 0 END) AS count_null_question_marks
from flowfile)""",
"sat_exam_block_jolt_spec":"""[
  {
    "operation": "shift",
    "spec": {
      "*": {
        "block_latitude": "data.[&1].Details.latitude",
        "block_longitude": "data.[&1].Details.longitude",
        "district_id": "data.[&1].Details.district_id",
        "district_name": "data.[&1].Details.district_name",
        "block_id": "data.[&1].Details.block_id",
        "block_name": "data.[&1].Details.block_name",
        "semester": "data.[&1].Details.semester",
        "total_students": "data.[&1].Details.total_students",
        "students_attended": "data.[&1].Details.students_attended",
        "total_schools": "data.[&1].Details.total_schools",
        "block_performance": "data.[&1].Details.Performance",
        "academic_year": "data.[&1].Details.Academic year",
        "school_management_type": "data.[&1].Details.school_management_type",
        "@grade_wise_performance": "data.[&1].Grade Wise Performance",
    "subject_wise_performance": "data.[&1].Grades",
        "@total_students": "footer.@(1,district_id).total_students[]",
        "@students_attended": "footer.@(1,district_id).students_attended[]",
        "@total_schools": "footer.@(1,district_id).total_schools[]"
      }
    }
	},
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "Details": "data.[&1].&",
          "Grade*": "data.[&1].&",
          "@Details.total_students": "AllBlocksFooter.total_students",
          "@Details.students_attended": "AllBlocksFooter.students_attended",
          "@Details.total_schools": "AllBlocksFooter.total_schools"
        }
      },
      "footer": "&"
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "footer": {
        "*": {
          "total_students": "=intSum(@(1,total_students))",
          "students_attended": "=intSum(@(1,students_attended))",
          "total_schools": "=intSum(@(1,total_schools))"
        }
      }
    }
	},
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "total_students": "=intSum(@(1,total_students))",
        "students_attended": "=intSum(@(1,students_attended))",
        "total_schools": "=intSum(@(1,total_schools))"
      }
    }
	}]""",
"semester_exam_grade_details_not_null":"""select * from flowfile where school_id  is not null and grade  is not null""",
"sat_check_same_record_semester_exam_mst_qry":"""SELECT exam_id,assessment_year,semester,medium,standard,division,subject_id,subject_name,exam_type_id,exam_type,exam_code,exam_date,total_questions,
total_marks,count(*)-1  num_of_times
FROM flowfile
GROUP BY exam_id,assessment_year,semester,medium,standard,division,subject_id,subject_name,exam_type_id,exam_type,exam_code,exam_date,total_questions,
total_marks
HAVING  COUNT(*) > 1""",
"sat_exam_cluster_jolt_spec":"""[
  {
    "operation": "shift",
    "spec": {
      "*": {
        "cluster_latitude": "data.[&1].Details.latitude",
        "cluster_longitude": "data.[&1].Details.longitude",
        "district_id": "data.[&1].Details.district_id",
        "district_name": "data.[&1].Details.district_name",
        "block_id": "data.[&1].Details.block_id",
        "block_name": "data.[&1].Details.block_name",
        "cluster_id": "data.[&1].Details.cluster_id",
        "cluster_name": "data.[&1].Details.cluster_name",
        "semester": "data.[&1].Details.semester",
        "total_students": "data.[&1].Details.total_students",
        "students_attended": "data.[&1].Details.students_attended",
        "total_schools": "data.[&1].Details.total_schools",
        "cluster_performance": "data.[&1].Details.Performance",
        "academic_year": "data.[&1].Details.Academic year",
        "school_management_type": "data.[&1].Details.school_management_type",
        "@grade_wise_performance": "data.[&1].Grade Wise Performance",
     "subject_wise_performance": "data.[&1].Grades",
        "@total_students": "footer.@(1,block_id).total_students[]",
        "@students_attended": "footer.@(1,block_id).students_attended[]",
        "@total_schools": "footer.@(1,block_id).total_schools[]"
      }
    }
	},
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "Details": "data.[&1].&",
          "Grade*": "data.[&1].&",
          "@Details.total_students": "AllClustersFooter.total_students",
          "@Details.students_attended": "AllClustersFooter.students_attended",
          "@Details.total_schools": "AllClustersFooter.total_schools"
        }
      },
      "footer": "&"
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "footer": {
        "*": {
          "total_students": "=intSum(@(1,total_students))",
          "students_attended": "=intSum(@(1,students_attended))",
          "total_schools": "=intSum(@(1,total_schools))"
        }
      }
    }
	},
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "total_students": "=intSum(@(1,total_students))",
        "students_attended": "=intSum(@(1,students_attended))",
        "total_schools": "=intSum(@(1,total_schools))"
      }
    }
	}]""",
"sat_semester_exam_qst_mst_datatype":"""Optional(parseInt()),Optional(parseInt()),Optional(parseInt()),Optional(StrNotNullOrEmpty()),Optional(StrNotNullOrEmpty()),Optional(StrNotNullOrEmpty())
Optional(StrNotNullOrEmpty()),Optional(ParseDouble())""",
"sat_exam_question_mst_table_name":"""semester_exam_mst""",
"sat_remove_data_retention_qry":"""WITH deleted AS (delete from semester_exam_result_staging_1 sem where (to_date(substr(sem.exam_code,8,14),'ddmmyyyy')<(now() -(select concat(trim(coalesce(max(retention_period),90)::text),'days') from data_replay_meta)::interval)::date) and exam_code not in (select exam_code from semester_exam_mst sem join (select distinct unnest(string_to_array(regexp_replace(semesters,'[^0-9,]','','g'),',')) as semesters,academic_year from data_replay_meta where created_on>now()-'5days'::interval and cqube_process_status='SUCCESS' and data_source='semester_assessment_test') dsem on sem.semester=dsem.semesters::int and sem.assessment_year=dsem.academic_year) IS TRUE RETURNING *) SELECT CASE WHEN count(*)>0 THEN 'Deleted '||count(*)||' record from semester_exam_result_staging_1 due to retention policy' else 'SAT staging_1 completed' end as msg FROM deleted;""",
"sat_semester_exam_subject_details_table_name":"""subject_details""",
"sat_check_same_id_record_semester_exam_grade_details_qry":"""SELECT b.school_id,b.grade,b.students_count,count(*) num_of_times  from (select school_id,grade from flowfile
group by school_id,grade having count(1)>1) as a, flowfile  b
where a.school_id=b.school_id and
a.grade=b.grade
group by b.school_id,b.grade,b.students_count""",
"sat_check_same_id_record_semester_exam_qst_mst_qry":"""SELECT b.question_id,b.exam_id,b.indicator_id,b.indicator_title,b."indicator",b.question_title,b.question,b.question_marks,count(*) num_of_times  from (select question_id from flowfile
group by question_id having count(1)>1)  as a, flowfile  b
where a.question_id=b.question_id
group by b.question_id,b.exam_id,b.indicator_id,b.indicator_title,b."indicator",b.question_title,b.question,b.question_marks""",
"sat_grade_district_jolt_spec":"""[
  {
    "operation": "shift",
    "spec": {
      "*": {
        "district_latitude": "data.[&1].Details.latitude",
        "district_longitude": "data.[&1].Details.longitude",
        "district_id": "data.[&1].Details.district_id",
        "district_name": "data.[&1].Details.district_name",
        "semester": "data.[&1].Details.semester",
        "district_performance": "data.[&1].Details.Performance",
        "academic_year": "data.[&1].Details.Academic year",
        "school_management_type": "data.[&1].Details.school_management_type",
        "grade": "data.[&1].Details.Grade",
        "@grade_wise_performance": "data.[&1].Grade Wise Performance",
        "total_students": "data.[&1].Details.total_students",
        "students_attended": "data.[&1].Details.students_attended",
        "total_schools": "data.[&1].Details.total_schools",
       "subjects": "data.[&1].Subjects",
        "@total_students": "AllDistrictsFooter.total_students",
        "@students_attended": "AllDistrictsFooter.students_attended",
        "@total_schools": "AllDistrictsFooter.total_schools"
      }
    }
	},
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "total_students": "=intSum(@(1,total_students))",
        "students_attended": "=intSum(@(1,students_attended))",
        "total_schools": "=intSum(@(1,total_schools))"
      }
    }
	}]""",
"sat_filter_same_id_record_semester_exam_mst_qry":"""SELECT  exam_id,assessment_year,semester,medium,standard,division,subject_id,subject_name,exam_type_id,exam_type,exam_code,exam_date,total_questions,
total_marks from 
(SELECT  exam_id,assessment_year,semester,medium,standard,division,subject_id,subject_name,exam_type_id,exam_type,exam_code,exam_date,total_questions,
total_marks,count(*) over (partition by exam_id,assessment_year,semester) as rn from FLOWFILE) sq Where rn =1""",
"sat_semester_exam_subject_details_dup_table_name":"""sat_subject_details_dup""",
"sat_exam_district_jolt_spec":"""[
  {
    "operation": "shift",
    "spec": {
      "*": {
        "district_latitude": "data.[&1].Details.latitude",
        "district_longitude": "data.[&1].Details.longitude",
        "district_id": "data.[&1].Details.district_id",
        "district_name": "data.[&1].Details.district_name",
        "semester": "data.[&1].Details.semester",
        "total_students": "data.[&1].Details.total_students",
        "students_attended": "data.[&1].Details.students_attended",
        "total_schools": "data.[&1].Details.total_schools",
        "district_performance": "data.[&1].Details.Performance",
        "academic_year": "data.[&1].Details.Academic Year",
        "school_management_type": "data.[&1].Details.school_management_type",
        "@grade_wise_performance": "data.[&1].Grade Wise Performance",
       "subject_wise_performance": "data.[&1].Grades",
        "@total_students": "AllDistrictsFooter.total_students",
        "@students_attended": "AllDistrictsFooter.students_attended",
        "@total_schools": "AllDistrictsFooter.total_schools"
      }
    }
	},
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "total_students": "=intSum(@(1,total_students))",
        "students_attended": "=intSum(@(1,students_attended))",
        "total_schools": "=intSum(@(1,total_schools))"
      }
    }
	}]""",
"sat_filter_same_id_record_semester_exam_subject_details_qry":"""SELECT  subject_id,subject,grade from 
(SELECT  subject_id,subject,grade,count(*) over (partition by subject_id,grade) as rn from FLOWFILE) sq Where rn =1""",
"sat_semester_exam_qst_mst_not_null":"""select * from flowfile
where question_id IS NOT NULL
and exam_id IS NOT NULL
and question_title IS NOT NULL
and question IS NOT NULL
and question_marks IS NOT NULL""",
"sat_semester_exam_mst_check_if_null":"""select * from flowfile
where exam_id  IS NULL
or assessment_year IS NULL
or semester IS NULL
or medium IS NULL
or standard IS NULL
or subject_id IS NULL
or subject_name IS NULL
or exam_type_id IS NULL
or exam_type IS NULL
or exam_code IS NULL
or exam_date IS NULL
or total_questions IS NULL
or total_marks IS NULL""",
"sat_exception_grade_district_jolt_spec":"""[
  {
    "operation": "shift",
    "spec": {
      "*": {
        "district_latitude": "data.[&1].district_latitude",
        "district_longitude": "data.[&1].district_longitude",
        "district_id": "data.[&1].district_id",
        "district_name": "data.[&1].district_name",
        "school_management_type": "data.[&1].school_management_type",
        "semester": "data.[&1].semester",
        "grade": "data.[&1].grade",
        "subjects": "data.[&1].subjects",
        "total_schools": "data.[&1].total_schools",
        "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data",
        "@total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
        "total_schools_with_missing_data": "allDistrictsFooter.total_schools_with_missing_data[]"
      }
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "total_schools_with_missing_data": "=intSum(@(1,total_schools_with_missing_data))"
      }
    }
  },
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "district_latitude": "data.[&1].district_latitude",
          "district_longitude": "data.[&1].district_longitude",
          "district_id": "data.[&1].district_id",
          "district_name": "data.[&1].district_name",
          "school_management_type": "data.[&1].school_management_type",
          "semester": "data.[&1].semester",
          "grade": "data.[&1].grade",
          "subjects": "data.[&1].subjects",
          "total_schools": "data.[&1].total_schools",
          "total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
          "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data"
        }
      },
      "allDistrictsFooter": "&"
    }
  }
]""",
"sat_semester_exam_grade_details_table_name":"""school_grade_enrolment""",
"sat_check_same_record_semester_exam_qst_mst_qry":"""SELECT question_id,exam_id,indicator_id,indicator_title,"indicator",question_title,question,question_marks,count(question_id)-1  num_of_times
FROM flowfile
GROUP BY question_id,exam_id,indicator_id,indicator_title,"indicator",question_title,question,
question_marks
HAVING  COUNT(*) > 1""",
"semester_exam_subject_details_datatype":"""Optional(parseInt()),StrNotNullOrEmpty(),Optional(parseInt())""",
"sat_semester_exam_mst_datatype":"""Optional(parseInt()),Optional(StrNotNullOrEmpty()),Optional(parseInt()),Optional(StrNotNullOrEmpty()),Optional(parseInt()),Optional(StrNotNullOrEmpty()),Optional(parseInt()),
Optional(StrNotNullOrEmpty()),Optional(parseInt()),Optional(StrNotNullOrEmpty()),Optional(StrNotNullOrEmpty()),Optional(ParseDate("yyyy-MM-dd")),Optional(parseInt()),Optional(parseInt())""",
"sat_exception_grade_cluster_jolt_spec":"""[
  {
    "operation": "shift",
    "spec": {
      "*": {
        "cluster_latitude": "data.[&1].cluster_latitude",
        "cluster_longitude": "data.[&1].cluster_longitude",
        "district_id": "data.[&1].district_id",
        "district_name": "data.[&1].district_name",
        "block_id": "data.[&1].block_id",
        "block_name": "data.[&1].block_name",
        "cluster_id": "data.[&1].cluster_id",
        "cluster_name": "data.[&1].cluster_name",
        "school_management_type": "data.[&1].school_management_type",
        "semester": "data.[&1].semester",
        "grade": "data.[&1].grade",
        "subjects": "data.[&1].subjects",
        "total_schools": "data.[&1].total_schools",
        "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data",
        "@total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
        "total_schools_with_missing_data": "footer.@(1,block_id).total_schools_with_missing_data"
      }
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "footer": {
        "*": {
          "total_schools_with_missing_data": "=intSum(@(1,total_schools_with_missing_data))"
        }
      }
    }
  },
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "cluster_latitude": "data.[&1].cluster_latitude",
          "cluster_longitude": "data.[&1].cluster_longitude",
          "district_id": "data.[&1].district_id",
          "district_name": "data.[&1].district_name",
          "block_id": "data.[&1].block_id",
          "block_name": "data.[&1].block_name",
          "cluster_id": "data.[&1].cluster_id",
          "cluster_name": "data.[&1].cluster_name",
          "school_management_type": "data.[&1].school_management_type",
          "semester": "data.[&1].semester",
          "grade": "data.[&1].grade",
          "subjects": "data.[&1].subjects",
          "total_schools": "data.[&1].total_schools",
          "@total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
          "total_schools_with_missing_data": "allClustersFooter.total_schools_with_missing_data[]",
          "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data"
        }
      },
      "footer": "&"
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "total_schools_with_missing_data": "=intSum(@(1,total_schools_with_missing_data))"
      }
    }
  },
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "cluster_latitude": "data.[&1].cluster_latitude",
          "cluster_longitude": "data.[&1].cluster_longitude",
          "district_id": "data.[&1].district_id",
          "district_name": "data.[&1].district_name",
          "block_id": "data.[&1].block_id",
          "block_name": "data.[&1].block_name",
          "cluster_id": "data.[&1].cluster_id",
          "cluster_name": "data.[&1].cluster_name",
          "school_management_type": "data.[&1].school_management_type",
          "semester": "data.[&1].semester",
          "grade": "data.[&1].grade",
          "total_schools": "data.[&1].total_schools",
          "total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
          "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data",
          "subjects": "data.[&1].subjects"
        }
      },
      "footer": "&",
      "allClustersFooter": "&"
    }
  }
]""",
"sat_queries_filename":"""sat_queries.json""",
"sat_semester_result_trans_check_if_null":"""select * from semester_exam_result_staging_1
where id  IS NULL
or exam_id IS NULL
or exam_code IS NULL
or student_uid IS NULL
or school_id IS NULL
or studying_class IS NULL
or question_id IS NULL
or obtained_marks IS NULL""",
"semester_exam_subject_details_check_if_null":"""select * from flowfile
where subject_id is null or grade is null""",
"sat_semester_exam_result_dup_table_name":"""semester_exam_result_dup""",
"sat_subject_footer_block_jolt_spec":"""[
  {
    "operation": "shift",
    "spec": {
      "*": {
        "@grade": "@block_id"
      }
    }
	}
]""",
"sat_semester_exam_grade_details_dup_table_name":"""sat_school_grade_enrolment_dup""",
"sat_filter_same_id_record_semester_exam_qst_mst_qry":"""SELECT  question_id,exam_id,indicator_id,indicator_title,"indicator",question_title,question,question_marks from 
(SELECT  question_id,exam_id,indicator_id,indicator_title,"indicator",question_title,question,question_marks,count(*) over (partition by question_id) as rn from FLOWFILE) sq Where rn =1""",
"sat_update_null_count_semester_exam_subject_details_qry":"""update log_summary
SET subject_id = sat_null_col.count_null_subject_id,
grade = sat_null_col.count_null_grade
from sat_null_col
where sat_null_col.ff_uuid = log_summary.ff_uuid""",
"semester_exam_grade_details_check_if_null":"""select * from flowfile
where school_id is null or grade is null""",
"sat_exam_school_jolt_spec":"""[
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "cluster_id": ["=toString", null]
      }
    }
	},

  {
    "operation": "shift",
    "spec": {
      "*": {
        "school_latitude": "data.[&1].Details.latitude",
        "school_longitude": "data.[&1].Details.longitude",
        "district_id": "data.[&1].Details.district_id",
        "district_name": "data.[&1].Details.district_name",
        "block_id": "data.[&1].Details.block_id",
        "block_name": "data.[&1].Details.block_name",
        "cluster_id": "data.[&1].Details.cluster_id",
        "cluster_name": "data.[&1].Details.cluster_name",
        "school_id": "data.[&1].Details.school_id",
        "school_name": "data.[&1].Details.school_name",
        "semester": "data.[&1].Details.semester",
        "total_students": "data.[&1].Details.total_students",
        "students_attended": "data.[&1].Details.students_attended",
        "total_schools": "data.[&1].Details.total_schools",
        "school_performance": "data.[&1].Details.Performance",
        "academic_year": "data.[&1].Details.Academic year",
        "school_management_type": "data.[&1].Details.school_management_type",
        "@grade_wise_performance": "data.[&1].Grade Wise Performance",
"subject_wise_performance": "data.[&1].Grades",        "@total_students": "footer.@(1,cluster_id).total_students[]",
        "@students_attended": "footer.@(1,cluster_id).students_attended[]",
        "@total_schools": "footer.@(1,cluster_id).total_schools[]"
      }
    }
	},
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "Details": "data.[&1].&",
          "Grade*": "data.[&1].&",
          "@Details.total_students": "AllSchoolsFooter.total_students",
          "@Details.students_attended": "AllSchoolsFooter.students_attended",
          "@Details.total_schools": "AllSchoolsFooter.total_schools"
        }
      },
      "footer": "&"
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "footer": {
        "*": {
          "total_students": "=intSum(@(1,total_students))",
          "students_attended": "=intSum(@(1,students_attended))",
          "total_schools": "=intSum(@(1,total_schools))"
        }
      }
    }
	},
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "total_students": "=intSum(@(1,total_students))",
        "students_attended": "=intSum(@(1,students_attended))",
        "total_schools": "=intSum(@(1,total_schools))"
      }
    }
	}]""",
"semester_exam_grade_details_count_null":"""(select
SUM(CASE when school_id IS NULL THEN 1 ELSE 0 END) AS count_null_school_id,
SUM(CASE when grade IS NULL THEN 1 ELSE 0 END) AS count_null_grade
from flowfile)""",
"sat_semester_exam_result_trans_datatype":"""Optional(parseInt()),Optional(parseInt()),Optional(StrNotNullOrEmpty()),Optional(parseLong()),Optional(parseLong()),Optional(parseLong()),Optional(parseInt()),
Optional(StrNotNullOrEmpty()),Optional(parseInt()),Optional(parseDouble())""",
"sat_null_column_table_name":"""sat_null_col""",
"sat_check_same_record_semester_exam_result_qry":"""SELECT id,exam_id,exam_code,student_id,student_uid,school_id,studying_class,section,question_id,obtained_marks,count(id)-1  num_of_times
FROM semester_exam_result_staging_1
GROUP BY id,exam_id,exam_code,student_id,student_uid,school_id,studying_class,section,question_id,obtained_marks
HAVING  COUNT(*) > 1""",
"sch_hrchy_rm_special_char_2":"""update school_hierarchy_details set school_name=replace(school_name,']','') where school_name like '%]%';""",
"sch_hrchy_rm_special_char_1":"""update school_hierarchy_details set school_name=replace(school_name,'[','') where school_name like '%[%';""",
"sat_update_null_count_semester_result_trans_qry":"""update log_summary
SET id = sat_trans_null_col.count_null_id,
exam_id = sat_trans_null_col.count_null_exam_id,
exam_code = sat_trans_null_col.count_null_exam_code,
student_uid = sat_trans_null_col.count_null_student_uid,
school_id = sat_trans_null_col.count_null_school_id,
studying_class = sat_trans_null_col.count_null_studying_class,
question_id = sat_trans_null_col.count_null_question_id,
obtained_marks = sat_trans_null_col.count_null_obtained_marks
from sat_trans_null_col
where sat_trans_null_col.ff_uuid = log_summary.ff_uuid""",
"sat_meta_jolt_spec":"""[
  {
    "operation": "shift",
    "spec": {
      "*": {
        "json_object_agg": ""
      }
    }
  }]""",
"sat_select_columns_semester_exam_qst_mst_qry":"""select question_id,exam_id,indicator_id,indicator_title,"indicator",question_title,question,question_marks from flowfile""",
"sat_filter_same_record_semester_exam_mst_qry":"""select exam_id,assessment_year,semester,medium,standard,division,subject_id,subject_name,exam_type_id,exam_type,exam_code,exam_date,total_questions,
total_marks from (select exam_id,assessment_year,semester,medium,standard,division,subject_id,subject_name,exam_type_id,exam_type,exam_code,exam_date,total_questions,
total_marks,row_number() over (partition by exam_id,assessment_year,semester,medium,standard,division,subject_id,subject_name,exam_type_id,exam_type,exam_code,exam_date,total_questions,
total_marks) as rn from flowfile) sq Where rn =1""",
"sat_update_null_semester_exam_grade_details_qry":"""update log_summary
SET school_id = sat_null_col.count_null_school_id,
grade = sat_null_col.count_null_grade
from sat_null_col
where sat_null_col.ff_uuid = log_summary.ff_uuid""",
"sat_exception_school_jolt_spec":"""[
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "cluster_id": [
          "=toString",
          null
        ]
      }
    }
  },
  {
    "operation": "shift",
    "spec": {
      "*": {
        "school_latitude": "data.[&1].school_latitude",
        "school_longitude": "data.[&1].school_longitude",
        "district_id": "data.[&1].district_id",
        "district_name": "data.[&1].district_name",
        "block_id": "data.[&1].block_id",
        "block_name": "data.[&1].block_name",
        "cluster_id": "data.[&1].cluster_id",
        "cluster_name": "data.[&1].cluster_name",
        "school_id": "data.[&1].school_id",
        "school_name": "data.[&1].school_name",
        "school_management_type": "data.[&1].school_management_type",
        "semester": "data.[&1].semester",
        "total_schools": "data.[&1].total_schools",
        "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data",
        "@total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
        "total_schools_with_missing_data": "footer.@(1,cluster_id).total_schools_with_missing_data"
      }
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "footer": {
        "*": {
          "total_schools_with_missing_data": "=intSum(@(1,total_schools_with_missing_data))"
        }
      }
    }
  },
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "school_latitude": "data.[&1].school_latitude",
          "school_longitude": "data.[&1].school_longitude",
          "district_id": "data.[&1].district_id",
          "district_name": "data.[&1].district_name",
          "block_id": "data.[&1].block_id",
          "block_name": "data.[&1].block_name",
          "cluster_id": "data.[&1].cluster_id",
          "cluster_name": "data.[&1].cluster_name",
          "school_id": "data.[&1].school_id",
          "school_name": "data.[&1].school_name",
          "school_management_type": "data.[&1].school_management_type",
          "semester": "data.[&1].semester",
          "total_schools": "data.[&1].total_schools",
          "@total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
          "total_schools_with_missing_data": "allSchoolsFooter.total_schools_with_missing_data[]",
          "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data"
        }
      },
      "footer": "&"
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "total_schools_with_missing_data": "=intSum(@(1,total_schools_with_missing_data))"
      }
    }
  },
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "school_latitude": "data.[&1].school_latitude",
          "school_longitude": "data.[&1].school_longitude",
          "district_id": "data.[&1].district_id",
          "district_name": "data.[&1].district_name",
          "block_id": "data.[&1].block_id",
          "block_name": "data.[&1].block_name",
          "cluster_id": "data.[&1].cluster_id",
          "cluster_name": "data.[&1].cluster_name",
          "school_id": "data.[&1].school_id",
          "school_name": "data.[&1].school_name",
          "school_management_type": "data.[&1].school_management_type",
          "semester": "data.[&1].semester",
          "total_schools": "data.[&1].total_schools",
          "total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
          "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data"
        }
      },
      "footer": "&",
      "allSchoolsFooter": "&"
    }
  }
]""",
"sat_subject_footer_school_jolt_spec":"""[
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "school_id": ["=toString", null]
      }
    }
	},
  {
    "operation": "shift",
    "spec": {
      "*": {
        "@grade": "@school_id"
      }
    }
	}
]""",
"sat_semester_exam_mst_count_null":"""(select
SUM(CASE when exam_id IS NULL THEN 1 ELSE 0 END) AS count_null_exam_id,
SUM(CASE when assessment_year IS NULL THEN 1 ELSE 0 END) AS count_null_assessment_year,
SUM(CASE when semester IS NULL THEN 1 ELSE 0 END) AS count_null_semester,
SUM(CASE when medium IS NULL THEN 1 ELSE 0 END) AS count_null_medium,
SUM(CASE when standard IS NULL THEN 1 ELSE 0 END) AS count_null_standard,
SUM(CASE when subject_id IS NULL THEN 1 ELSE 0 END) AS count_null_subject_id,
SUM(CASE when subject_name IS NULL THEN 1 ELSE 0 END) AS count_null_subject_name,
SUM(CASE when exam_type_id IS NULL THEN 1 ELSE 0 END) AS count_null_exam_type_id,
SUM(CASE when exam_type IS NULL THEN 1 ELSE 0 END) AS count_null_exam_type,
SUM(CASE when exam_code IS NULL THEN 1 ELSE 0 END) AS count_null_exam_code,
SUM(CASE when exam_date IS NULL THEN 1 ELSE 0 END) AS count_null_exam_date,
SUM(CASE when total_questions IS NULL THEN 1 ELSE 0 END) AS count_null_total_questions,
SUM(CASE when total_marks IS NULL THEN 1 ELSE 0 END) AS count_null_total_marks
from flowfile)""",
"sat_subject_footer_cluster_jolt_spec":"""[
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "cluster_id": ["=toString", null]
      }
    }
	},
  {
    "operation": "shift",
    "spec": {
      "*": {
        "@grade": "@cluster_id"
      }
    }
	}
]""",
"sat_select_columns_semester_exam_subject_details_qry":"""select subject_id,subject,grade from flowfile""",
"sat_select_columns_semester_exam_result_trans_qry":"""select id,exam_id,exam_code,student_id,student_uid,school_id,studying_class,section,question_id,obtained_marks
from flowfile""",
"sat_check_same_record_semester_exam_subject_details_qry":"""SELECT subject_id,subject,grade,count(*)-1  num_of_times
FROM flowfile
GROUP BY subject_id,subject,grade
HAVING  COUNT(*) > 1""",
"sat_select_columns_semester_exam_mst_qry":"""select exam_id,assessment_year,semester,medium,standard,division,subject_id,subject_name,exam_type_id,exam_type,exam_code,exam_date,total_questions,total_marks from flowfile""",
"sat_update_null_count_semester_exam_qst_mst_qry":"""update log_summary
SET question_id = sat_null_col.count_null_question_id,
exam_id = sat_null_col.count_null_exam_id,
question_title = sat_null_col.count_null_question_title,
question = sat_null_col.count_null_question,
question_marks = sat_null_col.count_null_question_marks
from sat_null_col
where sat_null_col.ff_uuid = log_summary.ff_uuid""",
"sat_semester_exam_qst_mst_check_if_null":"""select * from flowfile
where question_id  IS NULL
or exam_id IS NULL
or question_title IS NULL
or question IS NULL
or question_marks IS NULL""",
"sat_check_same_id_record_semester_exam_mst_qry":"""SELECT b.exam_id,b.assessment_year,b.semester,b.medium,b.standard,b.division,b.subject_id,b.subject_name,b.exam_type_id,b.exam_type,b.exam_code,b.exam_date,b.total_questions,b.
total_marks,count(*) num_of_times  from (select exam_id,assessment_year,semester from flowfile
group by exam_id,assessment_year,semester having count(1)>1)  as a, flowfile  b
where a.exam_id=b.exam_id
and a.assessment_year=b.assessment_year
and a.semester=b.semester
group by b.exam_id,b.assessment_year,b.semester,b.medium,b.standard,b.division,b.subject_id,b.subject_name,b.exam_type_id,b.exam_type,b.exam_code,b.exam_date,b.total_questions,b.total_marks""",
"sat_semester_exam_mst_not_null":"""select * from flowfile
where exam_id  IS NOT  NULL
and assessment_year IS NOT  NULL
and semester IS NOT  NULL
and medium IS NOT  NULL
and standard IS NOT  NULL
and subject_id IS NOT  NULL
and subject_name IS NOT  NULL
and exam_type_id IS NOT  NULL
and exam_type IS NOT  NULL
and exam_code IS NOT  NULL
and exam_date IS NOT  NULL
and total_questions IS NOT  NULL
and total_marks IS NOT  NULL""",
"sat_filter_same_record_semester_exam_qst_mst_qry":"""select question_id,exam_id,indicator_id,indicator_title,"indicator",question_title,question,question_marks from (select question_id,exam_id,indicator_id,indicator_title,"indicator",question_title,question,question_marks,
row_number() over (partition by question_id,exam_id,indicator_id,indicator_title,"indicator",question_title,question,question_marks) as rn from flowfile) sq Where rn =1""",
"semester_exam_result_staging_1_tb_name":"""semester_exam_result_staging_1""",
"sat_insert_semester_exam_school_ind_result":"""insert into semester_exam_school_ind_result(academic_year,exam_code,exam_date,school_id,grade,school_name,district_id,district_name,block_id,block_name,cluster_id,cluster_name,subject,indicator,
	obtained_marks,total_marks,students_attended,total_students,school_management_type,school_category,created_on,updated_on)
	select data.academic_year,data.exam_code,data.exam_date,data.school_id,data.grade,data.school_name,data.district_id,data.district_name,data.block_id,data.block_name,data.cluster_id,data.cluster_name,
	data.subject,data.indicator,data.obtained_marks,data.total_marks,data.students_attended,data.total_students,data.school_management_type,data.school_category,now(),now()
	from (select academic_year,exam_code,exam_date,school_id,grade,school_name,district_id,district_name,block_id,block_name,cluster_id,cluster_name,subject,indicator,
	round(sum(obtained_marks)::numeric) as obtained_marks,round(sum(total_marks)::numeric) as total_marks,max(students_attended) as students_attended,max(total_students) as total_students,
	school_management_type,school_category
	from semester_exam_school_qst_result where students_attended > 0
	group by academic_year,exam_code,exam_date,school_id,grade,school_name,district_id,district_name,block_id,block_name,cluster_id,cluster_name,subject,indicator,school_management_type,school_category)as data
	on conflict(school_id,exam_code,academic_year,indicator)
	do update set 
	school_id=excluded.school_id,exam_code=excluded.exam_code,exam_date=excluded.exam_date,grade=excluded.grade,total_marks=excluded.total_marks,
	obtained_marks=excluded.obtained_marks,indicator=excluded.indicator,academic_year=excluded.academic_year,subject=excluded.subject,
	students_attended=excluded.students_attended,school_name=excluded.school_name,total_students=excluded.total_students,
	cluster_id=excluded.cluster_id,cluster_name=excluded.cluster_name,block_id=excluded.block_id,block_name=excluded.block_name,
district_id=excluded.district_id,district_name=excluded.district_name,school_management_type=excluded.school_management_type,school_category=excluded.school_category,updated_on=now();
""",
"semester_exam_result_stg_1_to_stg_2_qry":"""insert into semester_exam_result_staging_2(id,exam_id,exam_code,student_id,student_uid,school_id,studying_class,section,question_id,obtained_marks,ff_uuid)
select id,exam_id,exam_code,student_id,student_uid,school_id,studying_class,section,question_id,obtained_marks,ff_uuid
from  semester_exam_result_staging_1""",
"semester_exam_subject_details_not_null":"""select * from flowfile where subject_id is not null and grade is not null""",
"sat_trans_null_column_table_name":"""sat_trans_null_col""",
"sat_filter_same_record_semester_exam_grade_details_qry":"""select school_id,grade,students_count from (select  school_id,grade,students_count,row_number() over
(partition by school_id,grade,students_count) as rn from flowfile) sq Where rn =1""",
"sat_periodic_result_trans_count_null":"""(select
SUM(CASE when id IS NULL THEN 1 ELSE 0 END) AS count_null_id,
SUM(CASE when exam_id IS NULL THEN 1 ELSE 0 END) AS count_null_exam_id,
SUM(CASE when exam_code IS NULL THEN 1 ELSE 0 END) AS count_null_exam_code,
SUM(CASE when student_uid IS NULL THEN 1 ELSE 0 END) AS count_null_student_uid,
SUM(CASE when school_id IS NULL THEN 1 ELSE 0 END) AS count_null_school_id,
SUM(CASE when studying_class IS NULL THEN 1 ELSE 0 END) AS count_null_studying_class,
SUM(CASE when question_id IS NULL THEN 1 ELSE 0 END) AS count_null_question_id,
SUM(CASE when obtained_marks IS NULL THEN 1 ELSE 0 END) AS count_null_obtained_marks from periodic_exam_result_staging_1)""",
"sat_select_columns_semester_exam_grade_details_qry":"""select school_id,grade,students_count from flowfile""",
"sat_filter_same_record_semester_exam_result_qry":"""insert into semester_exam_result_staging_2(id,exam_id,exam_code,student_id,student_uid,school_id,studying_class,section,question_id,obtained_marks,ff_uuid)
select id,exam_id,exam_code,student_id,student_uid,school_id,studying_class,section,question_id,obtained_marks,ff_uuid from 
(select id,exam_id,exam_code,student_id,student_uid,school_id,studying_class,section,question_id,obtained_marks,ff_uuid,
row_number() over (partition by id,exam_id,exam_code,student_id,student_uid,school_id,studying_class,section,question_id,obtained_marks) as rn 
from semester_exam_result_staging_1) sq Where rn =1""",
"sat_exam_exam_mst_table_name":"""semester_exam_qst_mst""",
"sat_check_same_id_record_semester_exam_result_qry":"""SELECT b.id,b.exam_id,b.exam_code,b.student_id,b.student_uid,b.school_id,b.studying_class,b.section,b.question_id,b.obtained_marks,count(*) num_of_times  from 
(select exam_code,student_uid,question_id from semester_exam_result_staging_2
group by exam_code,student_uid,question_id having count(1)>1)  as a, semester_exam_result_staging_2  b
where 
a.exam_code=b.exam_code and a.student_uid=b.student_uid and a.question_id=b.question_id
group by b.id,b.exam_id,b.exam_code,b.student_id,b.student_uid,b.school_id,b.studying_class,b.section,b.question_id,b.obtained_marks""",
"sat_learning_outcome_meta_jolt_spec":"""[
  {
    "operation": "shift",
    "spec": {
      "*": {
        "sat_meta": ""
      }
    }
  }
]
""",
"sat_mv_queries":"""REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_district_last7;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_block_last7;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_cluster_last7;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_school_last7;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_district_mgmt_last7;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_block_mgmt_last7;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_cluster_mgmt_last7;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_school_mgmt_last7;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_district_last30;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_block_last30;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_cluster_last30;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_school_last30;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_district_mgmt_last30;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_block_mgmt_last30;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_cluster_mgmt_last30;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_school_mgmt_last30;

REFRESH MATERIALIZED VIEW sat_stud_count_school_mgmt_last7;
REFRESH MATERIALIZED VIEW sat_stud_count_school_grade_mgmt_last7;
REFRESH MATERIALIZED VIEW sat_stud_count_school_mgmt_last30;
REFRESH MATERIALIZED VIEW sat_stud_count_school_grade_mgmt_last30;

REFRESH MATERIALIZED VIEW semester_exam_district_all;
REFRESH MATERIALIZED VIEW semester_exam_block_all;
REFRESH MATERIALIZED VIEW semester_exam_cluster_all;
REFRESH MATERIALIZED VIEW semester_exam_school_all;

REFRESH MATERIALIZED VIEW semester_exam_district_mgmt_all;
REFRESH MATERIALIZED VIEW semester_exam_block_mgmt_all;
REFRESH MATERIALIZED VIEW semester_exam_cluster_mgmt_all;
REFRESH MATERIALIZED VIEW semester_exam_school_mgmt_all;

REFRESH MATERIALIZED VIEW semester_exam_district_last30;
REFRESH MATERIALIZED VIEW semester_exam_block_last30;
REFRESH MATERIALIZED VIEW semester_exam_cluster_last30;
REFRESH MATERIALIZED VIEW semester_exam_school_last30;

REFRESH MATERIALIZED VIEW semester_exam_district_mgmt_last30;
REFRESH MATERIALIZED VIEW semester_exam_block_mgmt_last30;
REFRESH MATERIALIZED VIEW semester_exam_cluster_mgmt_last30;
REFRESH MATERIALIZED VIEW semester_exam_school_mgmt_last30;

REFRESH MATERIALIZED VIEW semester_exam_district_last7;
REFRESH MATERIALIZED VIEW semester_exam_block_last7;
REFRESH MATERIALIZED VIEW semester_exam_cluster_last7;
REFRESH MATERIALIZED VIEW semester_exam_school_last7;

REFRESH MATERIALIZED VIEW semester_exam_district_mgmt_last7;
REFRESH MATERIALIZED VIEW semester_exam_block_mgmt_last7;
REFRESH MATERIALIZED VIEW semester_exam_cluster_mgmt_last7;
REFRESH MATERIALIZED VIEW semester_exam_school_mgmt_last7;

REFRESH MATERIALIZED VIEW semester_grade_district_last30;
REFRESH MATERIALIZED VIEW semester_grade_block_last30;
REFRESH MATERIALIZED VIEW semester_grade_cluster_last30;
REFRESH MATERIALIZED VIEW semester_grade_school_last30;

REFRESH MATERIALIZED VIEW semester_grade_district_mgmt_last30;
REFRESH MATERIALIZED VIEW semester_grade_block_mgmt_last30;
REFRESH MATERIALIZED VIEW semester_grade_cluster_mgmt_last30;
REFRESH MATERIALIZED VIEW semester_grade_school_mgmt_last30;

REFRESH MATERIALIZED VIEW semester_grade_district_last7;
REFRESH MATERIALIZED VIEW semester_grade_block_last7;
REFRESH MATERIALIZED VIEW semester_grade_cluster_last7;
REFRESH MATERIALIZED VIEW semester_grade_school_last7;

REFRESH MATERIALIZED VIEW semester_grade_district_mgmt_last7;
REFRESH MATERIALIZED VIEW semester_grade_block_mgmt_last7;
REFRESH MATERIALIZED VIEW semester_grade_cluster_mgmt_last7;
REFRESH MATERIALIZED VIEW semester_grade_school_mgmt_last7;

REFRESH MATERIALIZED VIEW  sat_mgmt_lo_p1_indicator_all;
REFRESH MATERIALIZED VIEW  sat_mgmt_lo_p1_indicator_district;
REFRESH MATERIALIZED VIEW  sat_mgmt_lo_p1_indicator_block;
REFRESH MATERIALIZED VIEW  sat_mgmt_lo_p1_indicator_cluster;
REFRESH MATERIALIZED VIEW  sat_lo_p1_indicator_all;
REFRESH MATERIALIZED VIEW  sat_lo_p1_indicator_district;
REFRESH MATERIALIZED VIEW  sat_lo_p1_indicator_block;
<<<<<<< HEAD:development/python/sat_parameters.txt
REFRESH MATERIALIZED VIEW  sat_lo_p1_indicator_cluster;""",
=======
REFRESH MATERIALIZED VIEW  sat_lo_p1_indicator_cluster;

REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_district;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_block;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_cluster;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_school;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_district_mgmt;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_block_mgmt;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_cluster_mgmt;
REFRESH MATERIALIZED VIEW sat_school_grade_enrolment_school_mgmt;
REFRESH MATERIALIZED VIEW sat_stud_count_school_mgmt_year_semester;
REFRESH MATERIALIZED VIEW sat_stud_count_school_grade_mgmt_year_semester;

REFRESH MATERIALIZED VIEW semester_exam_district_year_semester;
REFRESH MATERIALIZED VIEW semester_exam_block_year_semester;
REFRESH MATERIALIZED VIEW semester_exam_cluster_year_semester;
REFRESH MATERIALIZED VIEW semester_exam_school_year_semester;

REFRESH MATERIALIZED VIEW semester_grade_district_year_semester;
REFRESH MATERIALIZED VIEW semester_grade_block_year_semester;
REFRESH MATERIALIZED VIEW semester_grade_cluster_year_semester;
REFRESH MATERIALIZED VIEW semester_grade_school_year_semester;

REFRESH MATERIALIZED VIEW semester_exam_district_mgmt_year_semester;
REFRESH MATERIALIZED VIEW semester_exam_block_mgmt_year_semester;
REFRESH MATERIALIZED VIEW semester_exam_cluster_mgmt_year_semester;
REFRESH MATERIALIZED VIEW semester_exam_school_mgmt_year_semester;

REFRESH MATERIALIZED VIEW semester_grade_district_mgmt_year_semester;
REFRESH MATERIALIZED VIEW semester_grade_block_mgmt_year_semester;
REFRESH MATERIALIZED VIEW semester_grade_cluster_mgmt_year_semester;
<<<<<<< HEAD
REFRESH MATERIALIZED VIEW semester_grade_school_mgmt_year_semester;""",
>>>>>>> 90a335f8f4ace4b2bcb12f82c403d0f290d1f3f6:development/datasource/sat/nifi/sat_parameters.txt
=======
REFRESH MATERIALIZED VIEW semester_grade_school_mgmt_year_semester;

REFRESH MATERIALIZED VIEW semester_exam_state_trendline;
REFRESH MATERIALIZED VIEW semester_exam_state_mgmt_trendline;""",
>>>>>>> upstream/cQube-usecase-test
"semester_exam_subject_details_count_null":"""(select
SUM(CASE when subject_id IS NULL THEN 1 ELSE 0 END) AS count_null_subject_id,
SUM(CASE when grade IS NULL THEN 1 ELSE 0 END) AS count_null_grade
from flowfile)""",
"sat_check_same_id_record_semester_exam_subject_details_qry":"""SELECT b.subject_id,b.subject,b.grade,count(*) num_of_times  from (select subject_id,grade from flowfile
group by subject_id,grade having count(1)>1) as a, flowfile  b
where a.subject_id=b.subject_id and
a.grade=b.grade
group by b.subject_id,b.grade,b.subject""",
"sat_semester_exam_qst_mst_dup_table_name":"""semester_exam_qst_mst_dup""",
"sat_exception_block_jolt_spec":"""[
  {
    "operation": "shift",
    "spec": {
      "*": {
        "block_latitude": "data.[&1].block_latitude",
        "block_longitude": "data.[&1].block_longitude",
        "district_id": "data.[&1].district_id",
        "district_name": "data.[&1].district_name",
        "block_id": "data.[&1].block_id",
        "block_name": "data.[&1].block_name",
        "school_management_type": "data.[&1].school_management_type",
        "semester": "data.[&1].semester",
        "total_schools": "data.[&1].total_schools",
        "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data",
        "@total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
        "total_schools_with_missing_data": "footer.@(1,district_id).total_schools_with_missing_data"
      }
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "footer": {
        "*": {
          "total_schools_with_missing_data": "=intSum(@(1,total_schools_with_missing_data))"
        }
      }
    }
  },
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "block_latitude": "data.[&1].block_latitude",
          "block_longitude": "data.[&1].block_longitude",
          "district_id": "data.[&1].district_id",
          "district_name": "data.[&1].district_name",
          "block_id": "data.[&1].block_id",
          "block_name": "data.[&1].block_name",
          "school_management_type": "data.[&1].school_management_type",
          "semester": "data.[&1].semester",
          "total_schools": "data.[&1].total_schools",
          "@total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
          "total_schools_with_missing_data": "allBlocksFooter.total_schools_with_missing_data[]",
          "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data",
          "semester": "data.[&1].semester"
        }
      },
      "footer": "&"
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "total_schools_with_missing_data": "=intSum(@(1,total_schools_with_missing_data))"
      }
    }
  },
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "block_latitude": "data.[&1].block_latitude",
          "block_longitude": "data.[&1].block_longitude",
          "district_id": "data.[&1].district_id",
          "district_name": "data.[&1].district_name",
          "block_id": "data.[&1].block_id",
          "block_name": "data.[&1].block_name",
          "school_management_type": "data.[&1].school_management_type",
          "semester": "data.[&1].semester",
          "total_schools": "data.[&1].total_schools",
          "total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
          "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data"
        }
      },
      "footer": "&",
      "allBlocksFooter": "&"
    }
  }
]""",
"sat_update_null_count_semester_exam_mst_qry":"""update log_summary
SET exam_id = sat_null_col.count_null_exam_id,
assessment_year = sat_null_col.count_null_assessment_year,
semester = sat_null_col.count_null_semester,
medium = sat_null_col.count_null_medium,
standard = sat_null_col.count_null_standard,
subject_id = sat_null_col.count_null_subject_id,
subject_name = sat_null_col.count_null_subject_name,
exam_type_id = sat_null_col.count_null_exam_type_id,
exam_type = sat_null_col.count_null_exam_type,
exam_code = sat_null_col.count_null_exam_code,
exam_date = sat_null_col.count_null_exam_date,
total_questions = sat_null_col.count_null_total_questions,
total_marks = sat_null_col.count_null_total_marks
from sat_null_col
where sat_null_col.ff_uuid = log_summary.ff_uuid""",
"sat_grade_block_jolt_spec":"""[
  {
    "operation": "shift",
    "spec": {
      "*": {
        "block_latitude": "data.[&1].Details.latitude",
        "block_longitude": "data.[&1].Details.longitude",
        "district_id": "data.[&1].Details.district_id",
        "district_name": "data.[&1].Details.district_name",
        "block_id": "data.[&1].Details.block_id",
        "block_name": "data.[&1].Details.block_name",
        "semester": "data.[&1].Details.semester",
        "block_performance": "data.[&1].Details.Performance",
        "academic_year": "data.[&1].Details.Academic year",
        "school_management_type": "data.[&1].Details.school_management_type",
        "grade": "data.[&1].Details.Grade",
        "@grade_wise_performance": "data.[&1].Grade Wise Performance",
        "total_students": "data.[&1].Details.total_students",
        "students_attended": "data.[&1].Details.students_attended",
        "total_schools": "data.[&1].Details.total_schools",
"subjects": "data.[&1].Subjects",
        "@total_students": "footer.@(1,district_id).total_students[]",
        "@students_attended": "footer.@(1,district_id).students_attended[]",
        "@total_schools": "footer.@(1,district_id).total_schools[]"
      }
    }
	},
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "Details": "data.[&1].&",
          "Subjects": "data.[&1].&",
          "@Details.total_students": "AllBlocksFooter.total_students",
          "@Details.students_attended": "AllBlocksFooter.students_attended",
          "@Details.total_schools": "AllBlocksFooter.total_schools"
        }
      },
      "footer": "&"
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "footer": {
        "*": {
          "total_students": "=intSum(@(1,total_students))",
          "students_attended": "=intSum(@(1,students_attended))",
          "total_schools": "=intSum(@(1,total_schools))"
        }
      }
    }
	},
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "total_students": "=intSum(@(1,total_students))",
        "students_attended": "=intSum(@(1,students_attended))",
        "total_schools": "=intSum(@(1,total_schools))"
      }
    }
	}]""",
"sat_insert_semester_exam_stud_grade_count_qry":"""insert into semester_exam_stud_grade_count(exam_code,student_uid,school_id,studying_class)
select distinct exam_code,student_uid,school_id,studying_class
from  semester_exam_result_trans
on conflict(exam_code,student_uid,school_id)
do update set 	
exam_code=excluded.exam_code,
student_uid=excluded.student_uid,
school_id=excluded.school_id,
studying_class=excluded.studying_class;""",
"sat_grade_school_jolt_spec":"""[
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "cluster_id": ["=toString", null]
      }
    }
	},
  {
    "operation": "shift",
    "spec": {
      "*": {
        "*_lat*": "data.[&1].Details.latitude",
        "*_long*": "data.[&1].Details.longitude",
        "district_id": "data.[&1].Details.district_id",
        "district_name": "data.[&1].Details.district_name",
        "block_id": "data.[&1].Details.block_id",
        "block_name": "data.[&1].Details.block_name",
        "cluster_id": "data.[&1].Details.cluster_id",
        "cluster_name": "data.[&1].Details.cluster_name",
        "school_id": "data.[&1].Details.school_id",
        "school_name": "data.[&1].Details.school_name",
        "semester": "data.[&1].Details.semester",
        "school_performance": "data.[&1].Details.Performance",
        "academic_year": "data.[&1].Details.Academic year",
        "school_management_type": "data.[&1].Details.school_management_type",
        "grade": "data.[&1].Details.Grade",
        "@grade_wise_performance": "data.[&1].Grade Wise Performance",
        "total_students": "data.[&1].Details.total_students",
        "students_attended": "data.[&1].Details.students_attended",
        "total_schools": "data.[&1].Details.total_schools",
     "subjects": "data.[&1].Subjects",
        "@total_students": "footer.@(1,cluster_id).total_students[]",
        "@students_attended": "footer.@(1,cluster_id).students_attended[]",
        "@total_schools": "footer.@(1,cluster_id).total_schools[]"
      }
    }
	},
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "Details": "data.[&1].&",
          "Subjects": "data.[&1].&",
          "@Details.total_students": "AllSchoolsFooter.total_students",
          "@Details.students_attended": "AllSchoolsFooter.students_attended",
          "@Details.total_schools": "AllSchoolsFooter.total_schools"
        }
      },
      "footer": "&"
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "footer": {
        "*": {
          "total_students": "=intSum(@(1,total_students))",
          "students_attended": "=intSum(@(1,students_attended))",
          "total_schools": "=intSum(@(1,total_schools))"
        }
      }
    }
	},
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "total_students": "=intSum(@(1,total_students))",
        "students_attended": "=intSum(@(1,students_attended))",
        "total_schools": "=intSum(@(1,total_schools))"
      }
    }
	}]""",
"semester_exam_grade_details_datatype":"""Optional(parseLong()),Optional(parseInt()),Optional(parseInt())""",
"sat_check_same_record_semester_exam_grade_details_qry":"""SELECT school_id,grade,students_count,count(*)-1  num_of_times
FROM flowfile
GROUP BY school_id,grade,students_count
HAVING  COUNT(*) > 1""",
"semester_exam_result_delete_null_values_qry":"""delete from semester_exam_result_staging_1
where id  IS NULL
or exam_id IS NULL
or exam_code IS NULL
or student_uid IS NULL
or school_id IS NULL
or studying_class IS NULL
or question_id IS NULL
or obtained_marks IS NULL""",
"sat_exception_cluster_jolt_spec":"""[
  {
    "operation": "shift",
    "spec": {
      "*": {
        "cluster_latitude": "data.[&1].cluster_latitude",
        "cluster_longitude": "data.[&1].cluster_longitude",
        "district_id": "data.[&1].district_id",
        "district_name": "data.[&1].district_name",
        "block_id": "data.[&1].block_id",
        "block_name": "data.[&1].block_name",
        "cluster_id": "data.[&1].cluster_id",
        "cluster_name": "data.[&1].cluster_name",
        "school_management_type": "data.[&1].school_management_type",
        "semester": "data.[&1].semester",
        "total_schools": "data.[&1].total_schools",
        "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data",
        "@total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
        "total_schools_with_missing_data": "footer.@(1,block_id).total_schools_with_missing_data"
      }
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "footer": {
        "*": {
          "total_schools_with_missing_data": "=intSum(@(1,total_schools_with_missing_data))"
        }
      }
    }
  },
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "cluster_latitude": "data.[&1].cluster_latitude",
          "cluster_longitude": "data.[&1].cluster_longitude",
          "district_id": "data.[&1].district_id",
          "district_name": "data.[&1].district_name",
          "block_id": "data.[&1].block_id",
          "block_name": "data.[&1].block_name",
          "cluster_id": "data.[&1].cluster_id",
          "cluster_name": "data.[&1].cluster_name",
          "school_management_type": "data.[&1].school_management_type",
          "semester": "data.[&1].semester",
          "total_schools": "data.[&1].total_schools",
          "@total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
          "total_schools_with_missing_data": "allClustersFooter.total_schools_with_missing_data[]",
          "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data"
        }
      },
      "footer": "&"
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "total_schools_with_missing_data": "=intSum(@(1,total_schools_with_missing_data))"
      }
    }
  },
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "cluster_latitude": "data.[&1].cluster_latitude",
          "cluster_longitude": "data.[&1].cluster_longitude",
          "district_id": "data.[&1].district_id",
          "district_name": "data.[&1].district_name",
          "block_id": "data.[&1].block_id",
          "block_name": "data.[&1].block_name",
          "cluster_id": "data.[&1].cluster_id",
          "cluster_name": "data.[&1].cluster_name",
          "school_management_type": "data.[&1].school_management_type",
          "semester": "data.[&1].semester",
          "total_schools": "data.[&1].total_schools",
          "total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
          "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data"
        }
      },
      "footer": "&",
      "allClustersFooter": "&"
    }
  }
]""",
"sat_exception_district_jolt_spec":"""[
  {
    "operation": "shift",
    "spec": {
      "*": {
        "district_latitude": "data.[&1].district_latitude",
        "district_longitude": "data.[&1].district_longitude",
        "district_id": "data.[&1].district_id",
        "district_name": "data.[&1].district_name",
        "school_management_type": "data.[&1].school_management_type",
        "semester": "data.[&1].semester",
        "total_schools": "data.[&1].total_schools",
        "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data",
        "@total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
        "total_schools_with_missing_data": "allDistrictsFooter.total_schools_with_missing_data[]"
      }
    }
  },
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "total_schools_with_missing_data": "=intSum(@(1,total_schools_with_missing_data))"
      }
    }
  },
  {
    "operation": "shift",
    "spec": {
      "data": {
        "*": {
          "district_latitude": "data.[&1].district_latitude",
          "district_longitude": "data.[&1].district_longitude",
          "district_id": "data.[&1].district_id",
          "district_name": "data.[&1].district_name",
          "school_management_type": "data.[&1].school_management_type",
          "semester": "data.[&1].semester",
          "total_schools": "data.[&1].total_schools",
          "total_schools_with_missing_data": "data.[&1].total_schools_with_missing_data",
          "percentage_schools_with_missing_data": "data.[&1].percentage_schools_with_missing_data"
        }
      },
      "allDistrictsFooter": "&"
    }
  }
]""",
"sat_jolt_line_chart_state":"""[{
    "operation": "shift",
    "spec": {
      "*": {
        "state_performance": "@(1,academic_year).performance.[&1].state_performance",
        "total_schools": "@(1,academic_year).performance.[&1].total_schools",
        "total_students": "@(1,academic_year).performance.[&1].total_students",
        "students_attended": "@(1,academic_year).performance.[&1].students_attended",
        "semester": "@(1,academic_year).performance.[&1].semester",
        "grade_wise_performance": "@(1,academic_year).Grades.@(1,semester)"
      }
    }
	}
]""",
"sat_jolt_line_chart_school":"""[{
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "school_id": ["=toString", null]
      }
    }
	}, {
    "operation": "shift",
    "spec": {
      "*": {
        "@school_name": "@(1,school_id).school_name[]",
        "@school_performance": "@(1,school_id).performance.[&1].district_performance",
        "@total_schools": "@(1,school_id).performance.[&1].total_schools",
        "@total_students": "@(1,school_id).performance.[&1].total_students",
        "@students_attended": "@(1,school_id).performance.[&1].students_attended",
        "semester": "@(1,school_id).performance.[&1].semester",
        "@grade_wise_performance": "@(1,school_id).Grades.@(1,semester)"
      }
    }
	},{
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": "=recursivelySquashNulls"
    }
  }
 ]""",
"sat_jolt_line_chart_district":"""[{
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "district_id": ["=toString", null]
      }
    }
	}, {
    "operation": "shift",
    "spec": {
      "*": {
        "@district_name": "@(1,district_id).district_name[]",
        "@district_performance": "@(1,district_id).performance.[&1].district_performance",
        "@total_schools": "@(1,district_id).performance.[&1].total_schools",
        "@total_students": "@(1,district_id).performance.[&1].total_students",
        "@students_attended": "@(1,district_id).performance.[&1].students_attended",
        "semester": "@(1,district_id).performance.[&1].semester",
        "@grade_wise_performance": "@(1,district_id).Grades.@(1,semester)"
      }
    }
	},{
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": "=recursivelySquashNulls"
    }
  }
 ]""",
"sat_jolt_line_chart_cluster":"""[{
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "cluster_id": ["=toString", null]
      }
    }
	}, {
    "operation": "shift",
    "spec": {
      "*": {
        "@cluster_name": "@(1,cluster_id).cluster_name[]",
        "@cluster_performance": "@(1,cluster_id).performance.[&1].district_performance",
        "@total_schools": "@(1,cluster_id).performance.[&1].total_schools",
        "@total_students": "@(1,cluster_id).performance.[&1].total_students",
        "@students_attended": "@(1,cluster_id).performance.[&1].students_attended",
        "semester": "@(1,cluster_id).performance.[&1].semester",
        "@grade_wise_performance": "@(1,cluster_id).Grades.@(1,semester)"
      }
    }
	},{
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": "=recursivelySquashNulls"
    }
  }
 ]""",
"sat_jolt_line_chart_block":"""[{
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": {
        "block_id": ["=toString", null]
      }
    }
	}, {
    "operation": "shift",
    "spec": {
      "*": {
        "@block_name": "@(1,block_id).block_name[]",
        "@block_performance": "@(1,block_id).performance.[&1].district_performance",
        "@total_schools": "@(1,block_id).performance.[&1].total_schools",
        "@total_students": "@(1,block_id).performance.[&1].total_students",
        "@students_attended": "@(1,block_id).performance.[&1].students_attended",
        "semester": "@(1,block_id).performance.[&1].semester",
        "@grade_wise_performance": "@(1,block_id).Grades.@(1,semester)"
      }
    }
	},{
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": "=recursivelySquashNulls"
    }
  }
 ]"""
}